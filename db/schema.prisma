datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String?
  email           String    @unique
  hashedPassword  String?
  role            String    @default("USER")
  emailVerifiedAt DateTime?

  onboarded Boolean @default(true)

  avatarImageKey String?

  username String? @unique
  bio      String?

  todos    Todo[]
  tokens   Token[]
  sessions Session[]

  // payments
  hasLifetimeAccess        Boolean                    @default(false)
  order                    LemonSquuezyOrder[]
  LemonSqueezySubscription LemonSqueezySubscription[]

  // settings
  settingsEmailMarketing        Boolean @default(true)
  settingsEmailMarketingProduct Boolean @default(true)

  // invite gift codes
  giftCodes InviteGiftCode[]
}

model Todo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  title String
  done  Boolean @default(false)
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
  VERIFY_EMAIL
  UNSUBSCRIBE_EMAIL
}

// LEMONSQUEEZY

model LemonSquuezyOrder {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orderId    String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  refunded   Boolean  @default(false)
  attributes Json
}

enum LemonSqueezySubscriptionStatus {
  on_trial
  active
  paused
  past_due
  unpaid
  cancelled
  expired
}

model LemonSqueezyVariant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  price     Int
  variantId String @unique

  product   LemonSqueezyProduct @relation(fields: [productId], references: [id])
  productId String

  subscriptions LemonSqueezySubscription[]
  attributes    Json?
}

model LemonSqueezyProduct {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  productId String @unique

  variants      LemonSqueezyVariant[]
  subscriptions LemonSqueezySubscription[]

  attributes Json?
}

model LemonSqueezyPayment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription   LemonSqueezySubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String

  paymentId  String @unique
  attributes Json?
}

model LemonSqueezySubscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptionId String? @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   LemonSqueezyProduct @relation(fields: [productId], references: [id])
  productId String

  variant   LemonSqueezyVariant @relation(fields: [variantId], references: [id])
  variantId String

  attributes Json?
  status     LemonSqueezySubscriptionStatus

  payments LemonSqueezyPayment[]
}

model SignupInvite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique

  ipAddresses String

  accepted Boolean @default(false)
}

// The InviteGiftCode model represents gift codes that users can send to invite others.

model InviteGiftCode {
  id          String           @id @default(nanoid(5))
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  redeemed    Boolean          @default(false)
  sentInvites UserSentInvite[]
}

// The UserSentInvite model represents individual invites sent using gift codes.

model UserSentInvite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String

  // in the UserSentInvite tablle...
  // giftCodeId is a foreign key that references the id field in the InviteGiftCode table.

  giftCode   InviteGiftCode @relation(fields: [giftCodeId], references: [id])
  giftCodeId String
}
