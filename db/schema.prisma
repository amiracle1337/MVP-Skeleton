datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String?
  email           String    @unique
  hashedPassword  String?
  role            String    @default("USER")
  emailVerifiedAt DateTime?

  onboarded Boolean @default(true)

  avatarImageKey String?

  username String? @unique
  bio      String?

  todos    Todo[]
  tokens   Token[]
  sessions Session[]

  // payments
  hasLifetimeAccess        Boolean                    @default(false)
  order                    LemonSquuezyOrder[]
  LemonSqueezySubscription LemonSqueezySubscription[]

  // settings
  settingsEmailMarketing        Boolean @default(true)
  settingsEmailMarketingProduct Boolean @default(true)

  // invite gift codes
  giftCodes InviteGiftCode[]

  // webhooks
  webhooks Webhook[]
  ApiToken ApiToken[]
}

enum WebhookType {
  ActionCreated
  ActionUpdated
}

model Webhook {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  url       String
  type      WebhookType
  user      User        @relation(fields: [userId], references: [id])
  userId    String
}

enum ApiTokenPermission {
  CreateAction
  UpdateAction
  DeleteAction
  ReadAction
}

model ApiToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique @default(uuid())
  name      String   @default("default_name")

  user       User                 @relation(fields: [userId], references: [id])
  userId     String
  permission ApiTokenPermission[]
}

model Todo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  title String
  done  Boolean @default(false)
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
  VERIFY_EMAIL
  UNSUBSCRIBE_EMAIL
}

// LEMONSQUEEZY

model LemonSquuezyOrder {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orderId    String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  refunded   Boolean  @default(false)
  attributes Json
}

enum LemonSqueezySubscriptionStatus {
  on_trial
  active
  paused
  past_due
  unpaid
  cancelled
  expired
}

model LemonSqueezyVariant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  price     Int
  variantId String @unique

  product   LemonSqueezyProduct @relation(fields: [productId], references: [id])
  productId String

  subscriptions LemonSqueezySubscription[]
  attributes    Json?
}

model LemonSqueezyProduct {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  productId String @unique

  variants      LemonSqueezyVariant[]
  subscriptions LemonSqueezySubscription[]

  attributes Json?
}

model LemonSqueezyPayment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription   LemonSqueezySubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String

  paymentId  String @unique
  attributes Json?
}

model LemonSqueezySubscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptionId String? @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   LemonSqueezyProduct @relation(fields: [productId], references: [id])
  productId String

  variant   LemonSqueezyVariant @relation(fields: [variantId], references: [id])
  variantId String

  attributes Json?
  status     LemonSqueezySubscriptionStatus

  payments LemonSqueezyPayment[]
}

// SignupInvites track individual invitations sent using the gift codes.
// They contain information about the invitee and the status of the invite.
model SignupInvite {
  // The id field is a UUID generated by the database.
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // The email field is unique for each invitee.
  email String @unique

  // The ipAddresses field stores the IP address from which the invite was created.
  ipAddresses String

  // The accepted field indicates whether the invite has been accepted.
  accepted Boolean @default(false)

  // The giftCode field establishes a relationship with the InviteGiftCode model.
  // By defining the relationship on both sides, you can navigate from InviteGiftCode
  // to SignupInvite and vice versa.
  // When you create or update a SignupInvite, you explicitly set the giftCodeId field
  // to the id of an existing InviteGiftCode. This establishes the relationship.
  giftCode   InviteGiftCode? @relation(fields: [giftCodeId], references: [id])
  giftCodeId String?
}

// InviteGiftCode is a code generated by an existing user and can be sent out to potential new users.
// InviteGiftCodes are created by users to invite others.
model InviteGiftCode {
  id        String   @id @default(nanoid(5))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // The user field refers to the user who created and sent the invite gift code.
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // The sentInvites field contains an array of SignupInvites that have used this gift code.
  // The array indicates that a single gift code can be used to send multiple invites.
  sentInvites SignupInvite[]

  // The redeemed field indicates whether the gift code has been fully used.
  redeemed Boolean @default(false)
}
